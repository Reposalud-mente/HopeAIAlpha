generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r dotenv/config src/prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid()) @db.Uuid
  email              String           @unique
  passwordHash       String
  firstName          String
  lastName           String
  role               Role
  licenseNumber      String?
  specialty          String?
  clinicId           String?          @db.Uuid
  profileImageUrl    String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  lastLoginAt        DateTime?
  isActive           Boolean          @default(true)
  aiConsultations    AIConsultation[]
  appointments       Appointment[]
  assessments        Assessment[]
  attachments        Attachment[]
  auditLogs          AuditLog[]
  clinicalNotes      ClinicalNote[]
  connectionQualities ConnectionQuality[]
  feedback           Feedback[]
  messages           Message[]
  patients           Patient[]        @relation("CreatedByUser")
  reports            Report[]
  sessions           Session[]        @relation("ClinicianSessions")
  treatmentPlans     TreatmentPlan[]
  videoSessions      VideoSession[]   @relation("TherapistVideoSessions")
  webrtcAuditLogs    WebRTCAuditLog[]
  clinic             Clinic?          @relation(fields: [clinicId], references: [id])
}

model Clinic {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  address      String
  contactPhone String
  contactEmail String?
  logoUrl      String?
  website      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isActive     Boolean      @default(true)
  assessments  Assessment[]
  users        User[]
}

model Patient {
  id                    String        @id @default(uuid()) @db.Uuid
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                String?
  contactEmail          String        @unique
  contactPhone          String?
  address               String?
  emergencyContactName  String?
  emergencyContactPhone String?
  occupation            String?
  maritalStatus         String?
  insuranceProvider     String?
  insuranceNumber       String?
  educationLevel        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  createdById           String        @db.Uuid
  isActive              Boolean       @default(true)
  appointments          Appointment[]
  assessments           Assessment[]
  attachments           Attachment[]
  messages              Message[]
  createdBy             User          @relation("CreatedByUser", fields: [createdById], references: [id])
  sessions              Session[]
  videoSessions         VideoSession[]
}

model Assessment {
  id                  String                     @id @default(uuid()) @db.Uuid
  patientId           String                     @db.Uuid
  clinicianId         String                     @db.Uuid
  clinicId            String                     @db.Uuid
  assessmentDate      DateTime                   @default(now())
  status              AssessmentStatus           @default(DRAFT)
  currentStep         String                     @default("motivos_consulta")
  lastUpdated         DateTime                   @default(now()) @updatedAt
  completionDate      DateTime?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  type                String                     @default("PSYCHOLOGICAL_EVALUATION")
  clinic              Clinic                     @relation(fields: [clinicId], references: [id])
  clinician           User                       @relation(fields: [clinicianId], references: [id])
  patient             Patient                    @relation(fields: [patientId], references: [id])
  dsmCriteria         AssessmentDSM5Criteria[]
  evaluationAreas     AssessmentEvaluationArea[]
  icdCriteria         AssessmentICDCriteria[]
  clinicalNotes       ClinicalNote[]
  consultationReasons ConsultationReason[]
  reports             Report[]
  treatmentPlans      TreatmentPlan[]
}

model ConsultationReason {
  id           String     @id @default(uuid()) @db.Uuid
  assessmentId String     @db.Uuid
  reason       String
  createdAt    DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
}

model EvaluationArea {
  id          String                     @id
  name        String
  description String?
  isActive    Boolean                    @default(true)
  assessments AssessmentEvaluationArea[]
}

model AssessmentEvaluationArea {
  assessmentId String         @db.Uuid
  areaId       String
  notes        String?
  createdAt    DateTime       @default(now())
  area         EvaluationArea @relation(fields: [areaId], references: [id])
  assessment   Assessment     @relation(fields: [assessmentId], references: [id])

  @@id([assessmentId, areaId])
}

model Appointment {
  id                   String            @id @default(uuid()) @db.Uuid
  patientId            String            @db.Uuid
  userId               String            @db.Uuid
  title                String            @default("Consulta")
  date                 DateTime
  endTime              DateTime
  duration             Int               @default(60) // Duration in minutes
  status               AppointmentStatus @default(SCHEDULED)
  notes                String?
  location             String?           // Physical location or virtual meeting link
  isRecurring          Boolean           @default(false)
  recurrencePattern    String?           // weekly, monthly, etc.
  recurrenceEndDate    DateTime?
  parentAppointmentId  String?           @db.Uuid
  reminderSent         Boolean           @default(false)
  notificationPreference String?         // email, in-app, both, none
  colorCode            String?           // For color-coding in the calendar view
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  patient              Patient           @relation(fields: [patientId], references: [id])
  user                 User              @relation(fields: [userId], references: [id])
  parentAppointment    Appointment?      @relation("RecurringAppointments", fields: [parentAppointmentId], references: [id])
  recurringAppointments Appointment[]    @relation("RecurringAppointments")
  videoSessions        VideoSession[]
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  patientId String   @db.Uuid
  userId    String   @db.Uuid
  content   String
  sentAt    DateTime @default(now())
  read      Boolean  @default(false)
  patient   Patient  @relation(fields: [patientId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id            String        @id @default(uuid()) @db.Uuid
  patientId     String        @db.Uuid
  clinicianId   String        @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  type          String
  objectives    Json?
  notes         String?
  activities    Json?
  attachments   Json?
  aiSuggestions Json?
  status        SessionStatus @default(DRAFT)
  clinician     User          @relation("ClinicianSessions", fields: [clinicianId], references: [id])
  patient       Patient       @relation(fields: [patientId], references: [id])
  videoSessions VideoSession[]
}

model ICDCriteria {
  code        String                  @id
  name        String
  description String?
  category    String
  isActive    Boolean                 @default(true)
  assessments AssessmentICDCriteria[]
  dsmCriteria DSM5Criteria[]
}

model AssessmentICDCriteria {
  assessmentId   String      @db.Uuid
  icdCode        String
  isPrimary      Boolean     @default(false)
  certaintyLevel String?
  notes          String?
  createdAt      DateTime    @default(now())
  assessment     Assessment  @relation(fields: [assessmentId], references: [id])
  criteria       ICDCriteria @relation(fields: [icdCode], references: [code])

  @@id([assessmentId, icdCode])
}

model Report {
  id           String     @id @default(uuid()) @db.Uuid
  assessmentId String     @db.Uuid
  reportText   String
  version      Int        @default(1)
  createdById  String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isFinal      Boolean    @default(false)
  filename     String?
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  createdBy    User       @relation(fields: [createdById], references: [id])
}

model ClinicalNote {
  id           String     @id @default(uuid()) @db.Uuid
  assessmentId String     @db.Uuid
  noteType     String
  content      String
  createdById  String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  createdBy    User       @relation(fields: [createdById], references: [id])
}

model AuditLog {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String?     @db.Uuid
  entityType String
  entityId   String      @db.Uuid
  details    Json?
  ipAddress  String?
  createdAt  DateTime    @default(now())
  action     AuditAction
  user       User?       @relation(fields: [userId], references: [id])
}

model Attachment {
  id                String   @id @default(uuid()) @db.Uuid
  relatedEntityType String
  relatedEntityId   String   @db.Uuid
  fileName          String
  filePath          String
  fileType          String
  fileSize          BigInt
  uploadedById      String   @db.Uuid
  uploadedAt        DateTime @default(now())
  description       String?
  patientId         String?  @db.Uuid
  patient           Patient? @relation(fields: [patientId], references: [id])
  uploadedBy        User     @relation(fields: [uploadedById], references: [id])
}

model TreatmentPlan {
  id               String     @id @default(uuid()) @db.Uuid
  assessmentId     String     @db.Uuid
  planText         String
  startDate        DateTime?
  expectedDuration String?
  createdById      String     @db.Uuid
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  status           String     @default("active")
  assessment       Assessment @relation(fields: [assessmentId], references: [id])
  createdBy        User       @relation(fields: [createdById], references: [id])
}

model Feedback {
  id         String    @id @default(uuid()) @db.Uuid
  type       String
  text       String
  screenshot String?
  url        String?
  userAgent  String?
  userId     String?   @db.Uuid
  metadata   Json?
  status     String    @default("new")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id])
}

model DSM5Criteria {
  code          String                   @id
  name          String
  description   String?
  category      String
  icdEquivalent String?
  isActive      Boolean                  @default(true)
  assessments   AssessmentDSM5Criteria[]
  icdCriteria   ICDCriteria?             @relation(fields: [icdEquivalent], references: [code])
}

model AssessmentDSM5Criteria {
  assessmentId   String       @db.Uuid
  dsmCode        String
  isPrimary      Boolean      @default(false)
  certaintyLevel String?
  notes          String?
  createdAt      DateTime     @default(now())
  assessment     Assessment   @relation(fields: [assessmentId], references: [id])
  criteria       DSM5Criteria @relation(fields: [dsmCode], references: [code])

  @@id([assessmentId, dsmCode])
}

model AIConsultation {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model VideoSession {
  id                String               @id @default(uuid()) @db.Uuid
  appointmentId     String?              @db.Uuid
  sessionId         String?              @db.Uuid
  patientId         String               @db.Uuid
  therapistId       String               @db.Uuid
  status            VideoSessionStatus   @default(WAITING_ROOM)
  startTime         DateTime?
  endTime           DateTime?
  duration          Int?                 // Duration in seconds
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  connectionQuality ConnectionQuality[]
  webrtcAuditLogs   WebRTCAuditLog[]
  patient           Patient              @relation(fields: [patientId], references: [id])
  therapist         User                 @relation("TherapistVideoSessions", fields: [therapistId], references: [id])
  appointment       Appointment?         @relation(fields: [appointmentId], references: [id])
  session           Session?             @relation(fields: [sessionId], references: [id])
}

model ConnectionQuality {
  id            String      @id @default(uuid()) @db.Uuid
  videoSessionId String      @db.Uuid
  userId        String      @db.Uuid
  timestamp     DateTime    @default(now())
  bandwidth     Int         // in kbps
  latency       Int         // in ms
  packetLoss    Float       // percentage
  jitter        Float       // in ms
  videoWidth    Int?
  videoHeight   Int?
  frameRate     Float?
  qualityLevel  QualityLevel
  videoSession  VideoSession @relation(fields: [videoSessionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model WebRTCAuditLog {
  id            String      @id @default(uuid()) @db.Uuid
  videoSessionId String      @db.Uuid
  userId        String      @db.Uuid
  eventType     String      // connection.started, connection.ended, etc.
  timestamp     DateTime    @default(now())
  details       Json?
  ipAddress     String?
  userAgent     String?
  videoSession  VideoSession @relation(fields: [videoSessionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

enum Role {
  PSYCHOLOGIST
  SUPERVISOR
  ADMIN
}

enum VideoSessionStatus {
  WAITING_ROOM
  CONNECTED
  DISCONNECTED
  COMPLETED
  FAILED
  CANCELLED
}

enum QualityLevel {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SessionStatus {
  DRAFT
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  TRANSFERRED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  EXPORT
  IMPORT
  ACCESS
  LOGIN
  LOGOUT
}
