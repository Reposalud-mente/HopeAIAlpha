// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r dotenv/config src/prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid()) @db.Uuid
  email           String         @unique
  passwordHash    String
  firstName       String
  lastName        String
  role            Role
  licenseNumber   String?
  specialty       String?
  clinicId        String?        @db.Uuid
  profileImageUrl String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastLoginAt     DateTime?
  isActive        Boolean        @default(true)

  // Relations
  clinic          Clinic?        @relation(fields: [clinicId], references: [id])
  assessments     Assessment[]
  reports         Report[]
  clinicalNotes   ClinicalNote[]
  patients        Patient[]      @relation("CreatedByUser")
  auditLogs       AuditLog[]
  attachments     Attachment[]
  treatmentPlans  TreatmentPlan[]
  feedback        Feedback[]
  appointments   Appointment[]
  messages       Message[]
  sessions        Session[]      @relation("ClinicianSessions")
}

enum Role {
  PSYCHOLOGIST
  SUPERVISOR
  ADMIN
}

model Clinic {
  id            String       @id @default(uuid()) @db.Uuid
  name          String
  address       String
  contactPhone  String
  contactEmail  String?
  logoUrl       String?
  website       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isActive      Boolean      @default(true)

  // Relations
  users         User[]
  assessments   Assessment[]
}

model Patient {
  id                    String       @id @default(uuid()) @db.Uuid
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                String?
  contactEmail          String       @unique
  contactPhone          String?
  address               String?
  emergencyContactName  String?
  emergencyContactPhone String?
  occupation            String?
  maritalStatus         String?
  insuranceProvider     String?
  insuranceNumber       String?
  educationLevel        String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  createdById           String       @db.Uuid
  isActive              Boolean      @default(true)

  // Relations
  createdBy             User         @relation("CreatedByUser", fields: [createdById], references: [id])
  assessments           Assessment[]
  attachments           Attachment[]
  appointments          Appointment[]
  messages              Message[]
  sessions              Session[]
}

model Assessment {
  id                String                @id @default(uuid()) @db.Uuid
  patientId         String                @db.Uuid
  clinicianId       String                @db.Uuid
  clinicId          String                @db.Uuid
  assessmentDate    DateTime              @default(now())
  status            AssessmentStatus      @default(DRAFT)
  currentStep       String                @default("motivos_consulta")
  lastUpdated       DateTime              @default(now()) @updatedAt
  completionDate    DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  patient           Patient               @relation(fields: [patientId], references: [id])
  clinician         User                  @relation(fields: [clinicianId], references: [id])
  clinic            Clinic                @relation(fields: [clinicId], references: [id])
  consultationReasons ConsultationReason[]
  evaluationAreas   AssessmentEvaluationArea[]
  icdCriteria       AssessmentICDCriteria[]
  dsmCriteria       AssessmentDSM5Criteria[]
  reports           Report[]
  clinicalNotes     ClinicalNote[]
  treatmentPlans    TreatmentPlan[]
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model ConsultationReason {
  id            String     @id @default(uuid()) @db.Uuid
  assessmentId  String     @db.Uuid
  reason        String
  createdAt     DateTime   @default(now())

  // Relations
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
}

model EvaluationArea {
  id          String                    @id
  name        String
  description String?
  isActive    Boolean                   @default(true)

  // Relations
  assessments AssessmentEvaluationArea[]
}

model AssessmentEvaluationArea {
  assessmentId String         @db.Uuid
  areaId       String
  notes        String?
  createdAt    DateTime       @default(now())

  // Relations
  assessment   Assessment     @relation(fields: [assessmentId], references: [id])
  area         EvaluationArea @relation(fields: [areaId], references: [id])

  @@id([assessmentId, areaId])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Appointment {
  id          String   @id @default(uuid()) @db.Uuid
  patientId   String   @db.Uuid
  userId      String   @db.Uuid
  date        DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient     Patient  @relation(fields: [patientId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  patientId   String   @db.Uuid
  userId      String   @db.Uuid
  content     String
  sentAt      DateTime @default(now())
  read        Boolean  @default(false)

  patient     Patient  @relation(fields: [patientId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  patientId     String   @db.Uuid
  clinicianId   String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  type          String
  objectives    Json?
  notes         String?
  activities    Json?
  status        String
  attachments   Json?
  aiSuggestions Json?

  // Relations
  patient       Patient  @relation(fields: [patientId], references: [id])
  clinician     User     @relation("ClinicianSessions", fields: [clinicianId], references: [id])
}


model ICDCriteria {
  code        String                  @id
  name        String
  description String?
  category    String
  isActive    Boolean                 @default(true)

  // Relations
  assessments AssessmentICDCriteria[]
  dsmCriteria DSM5Criteria[]         // Relation to DSM-5 criteria that are equivalent
}

model AssessmentICDCriteria {
  assessmentId   String       @db.Uuid
  icdCode        String
  isPrimary      Boolean      @default(false)
  certaintyLevel String?
  notes          String?
  createdAt      DateTime     @default(now())

  // Relations
  assessment     Assessment   @relation(fields: [assessmentId], references: [id])
  criteria       ICDCriteria  @relation(fields: [icdCode], references: [code])

  @@id([assessmentId, icdCode])
}

model Report {
  id           String     @id @default(uuid()) @db.Uuid
  assessmentId String     @db.Uuid
  reportText   String
  version      Int        @default(1)
  createdById  String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isFinal      Boolean    @default(false)
  filename     String?

  // Relations
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  createdBy    User       @relation(fields: [createdById], references: [id])
}

model ClinicalNote {
  id           String     @id @default(uuid()) @db.Uuid
  assessmentId String     @db.Uuid
  noteType     String
  content      String
  createdById  String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  createdBy    User       @relation(fields: [createdById], references: [id])
}

model AuditLog {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String?     @db.Uuid
  action      AuditAction
  entityType  String
  entityId    String      @db.Uuid
  details     Json?
  ipAddress   String?
  createdAt   DateTime    @default(now())

  // Relations
  user        User?       @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  EXPORT
  IMPORT
  ACCESS
  LOGIN
  LOGOUT
}

model Attachment {
  id                String    @id @default(uuid()) @db.Uuid
  relatedEntityType String
  relatedEntityId   String    @db.Uuid
  fileName          String
  filePath          String
  fileType          String
  fileSize          BigInt
  uploadedById      String    @db.Uuid
  uploadedAt        DateTime  @default(now())
  description       String?

  // Relations
  uploadedBy        User      @relation(fields: [uploadedById], references: [id])
  patient           Patient?  @relation(fields: [patientId], references: [id])
  patientId         String?   @db.Uuid
}

model TreatmentPlan {
  id             String       @id @default(uuid()) @db.Uuid
  assessmentId   String       @db.Uuid
  planText       String
  startDate      DateTime?
  expectedDuration String?
  createdById    String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  status         String       @default("active")

  // Relations
  assessment     Assessment   @relation(fields: [assessmentId], references: [id])
  createdBy      User         @relation(fields: [createdById], references: [id])
}

model Feedback {
  id          String    @id @default(uuid()) @db.Uuid
  type        String    // 'issue', 'suggestion', 'general'
  text        String    @db.Text
  screenshot  String?   @db.Text
  url         String?
  userAgent   String?
  userId      String?   @db.Uuid
  metadata    Json?     // Additional metadata like browser info, screen size, etc.
  status      String    @default("new") // 'new', 'in_progress', 'resolved', 'closed'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?

  // Relations
  user        User?     @relation(fields: [userId], references: [id])
}

model DSM5Criteria {
  code          String                    @id
  name          String
  description   String?
  category      String
  icdEquivalent String?
  isActive      Boolean                   @default(true)

  // Relations
  assessments   AssessmentDSM5Criteria[]
  icdCriteria   ICDCriteria?              @relation(fields: [icdEquivalent], references: [code])
}

model AssessmentDSM5Criteria {
  assessmentId   String       @db.Uuid
  dsmCode        String
  isPrimary      Boolean      @default(false)
  certaintyLevel String?
  notes          String?
  createdAt      DateTime     @default(now())

  // Relations
  assessment     Assessment   @relation(fields: [assessmentId], references: [id])
  criteria       DSM5Criteria @relation(fields: [dsmCode], references: [code])

  @@id([assessmentId, dsmCode])
}
