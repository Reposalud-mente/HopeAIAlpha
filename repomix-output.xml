This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
actions.ts
callback/route.ts
confirm/route.ts
error/page.tsx
login/page.tsx
reset-password/page.tsx
reset-password/route.ts
signup/page.tsx
update-password/page.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="actions.ts">
'use server';

import { createClient } from '@/utils/supabase/server';
import { headers } from 'next/headers';
import { redirect } from 'next/navigation';
import { revalidatePath } from 'next/cache';

/**
 * Sign up a new user with email and password
 * @param formData Form data containing email, password, and optional profile information
 * @returns Result object with success message or error
 */
export async function signUp(formData: FormData) {
  const origin = headers().get('origin');
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  const fullName = formData.get('fullName') as string | null;

  // Basic validation
  if (!email || !password) {
    return { error: 'Email and password are required.' };
  }
  if (password.length < 6) {
    return { error: 'Password must be at least 6 characters.' };
  }

  const supabase = await createClient();

  const { error, data } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${origin}/auth/confirm`,
      data: {
        full_name: fullName,
      }
    },
  });

  if (error) {
    console.error('Sign up error:', error.message);
    return { error: `Could not authenticate user: ${error.message}` };
  }

  // On successful sign-up with email confirmation enabled,
  // the user is created but not yet authenticated.
  // They need to click the confirmation link in their email.
  return { message: 'Check your email to complete the sign-up process.' };
}

/**
 * Log in a user with email and password
 * @param formData Form data containing email and password
 * @returns Result object with success or error
 */
export async function login(formData: FormData) {
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;

  if (!email || !password) {
    return { error: 'Email and password are required.' };
  }

  const supabase = await createClient();

  const { error, data } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    console.error('Login error:', error.message);
    return { error: `Login failed: ${error.message}` };
  }

  // Revalidate paths that might show different content based on auth state
  revalidatePath('/', 'layout');
  redirect('/dashboard');
}

/**
 * Sign out the current user
 */
export async function signOut() {
  const supabase = await createClient();
  const { error } = await supabase.auth.signOut();

  if (error) {
    console.error('Error signing out:', error.message);
    return { error: `Sign out failed: ${error.message}` };
  }

  // Revalidate all paths to ensure UI reflects logged-out state
  revalidatePath('/', 'layout');
  redirect('/auth/login?message=You have been logged out.');
}
</file>

<file path="callback/route.ts">
import { createClient } from '@/utils/supabase/server';
import { NextResponse, type NextRequest } from 'next/server';
import { type EmailOtpType } from '@supabase/supabase-js';

export async function GET(request: NextRequest) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get('code'); // For OAuth flow
  const token_hash = searchParams.get('token_hash'); // For email OTP flow
  const type = searchParams.get('type') as EmailOtpType | null; // For email OTP flow
  const next = searchParams.get('next') ?? '/dashboard'; // Default redirect path

  const supabase = await createClient();

  if (code) { // Handling OAuth callback
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      // Session is set by server client, redirect to the desired page
      return NextResponse.redirect(`${origin}${next}`);
    }
    console.error('OAuth Code Exchange Error:', error.message);
    // Redirect to an error page or show an error message
    return NextResponse.redirect(`${origin}/auth/error?message=OAuth_failed`);
  } else if (token_hash && type) { // Handling Email OTP callback
    const { error } = await supabase.auth.verifyOtp({ type, token_hash });
    if (!error) {
      return NextResponse.redirect(`${origin}${next}`);
    }
    console.error('Email OTP Verification Error:', error.message);
    return NextResponse.redirect(`${origin}/auth/error?message=Email_OTP_verification_failed`);
  }

  // If neither 'code' nor 'token_hash' is present, or if 'type' is missing for OTP
  console.warn('Callback received without code or valid OTP parameters.');
  return NextResponse.redirect(`${origin}/auth/error?message=Invalid_callback_parameters`);
}
</file>

<file path="confirm/route.ts">
/**
 * Email Confirmation Route Handler
 *
 * This file handles email confirmation for new users.
 * It verifies the email confirmation token and redirects the user.
 */

import { type EmailOtpType } from '@supabase/supabase-js';
import { type NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';
import { logAuditEvent } from '@/lib/audit-log';

/**
 * Handle GET requests for email confirmation
 * @param request The incoming request
 * @returns The response
 */
export async function GET(request: NextRequest) {
  try {
    // Get the token and confirmation type from the URL
    const { searchParams } = new URL(request.url);
    const token_hash = searchParams.get('token_hash');
    const type = searchParams.get('type') as EmailOtpType | null;
    // 'next' can be used to redirect to a specific page after confirmation
    const next = searchParams.get('next') ?? '/dashboard';

    // Ensure the 'next' path is relative and safe
    const redirectTo = new URL(next.startsWith('/') ? next : `/${next}`, request.url);

    if (token_hash && type) {
      const supabase = await createClient();
      const { error, data } = await supabase.auth.verifyOtp({
        type,
        token_hash,
      });

      if (!error) {
        // OTP verified successfully. The user is now authenticated, and the session is set in cookies
        // by the server client.

        // Log the successful email confirmation
        try {
          const { data: { user } } = await supabase.auth.getUser();
          await logAuditEvent({
            userId: user?.id || 'anonymous',
            action: 'EMAIL_CONFIRMED',
            entityType: 'User',
            entityId: user?.id || 'anonymous',
            details: { type },
          });
        } catch (logError) {
          console.error('Error logging email confirmation:', logError);
        }

        return NextResponse.redirect(redirectTo);
      }

      console.error('Error verifying OTP:', error.message);
      // It's good practice to inform the user about the error
      const errorPageUrl = new URL('/auth/error', request.url);
      errorPageUrl.searchParams.set('message', 'Link expired or invalid. Please try again.');
      return NextResponse.redirect(errorPageUrl);
    }

    // If token_hash or type is missing, redirect to an error page
    const errorPageUrl = new URL('/auth/error', request.url);
    errorPageUrl.searchParams.set('message', 'Invalid confirmation link.');
    return NextResponse.redirect(errorPageUrl);
  } catch (error) {
    console.error('Email confirmation error:', error);
    const errorPageUrl = new URL('/auth/error', request.url);
    errorPageUrl.searchParams.set('message', 'Error processing confirmation.');
    return NextResponse.redirect(errorPageUrl);
  }
}
</file>

<file path="error/page.tsx">
'use client';

import { useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function AuthErrorPage() {
  const searchParams = useSearchParams();
  const message = searchParams.get('message') || 'An authentication error occurred';

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <div className="w-full max-w-md space-y-8 rounded-lg border p-6 shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Authentication Error</h1>
          <div className="mt-4 rounded-md bg-red-50 p-4 text-sm text-red-700">
            {message}
          </div>
          <div className="mt-6">
            <Link
              href="/auth/login"
              className="inline-block rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Return to Login
            </Link>
          </div>
          <p className="mt-4 text-sm text-gray-600">
            If you continue to experience issues, please contact support.
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="login/page.tsx">
'use client';

import { login } from '../actions';
import { useState, useTransition } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const message = searchParams.get('message');
  const returnTo = searchParams.get('returnTo');
  
  const [errorMessage, setErrorMessage] = useState('');
  const [isPending, startTransition] = useTransition();

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    
    // Add returnTo to formData if it exists
    if (returnTo) {
      formData.append('returnTo', returnTo);
    }
    
    startTransition(async () => {
      const result = await login(formData);
      if (result?.error) {
        setErrorMessage(result.error);
      }
      // Successful login is handled by redirect in the server action
    });
  };

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <div className="w-full max-w-md space-y-8 rounded-lg border p-6 shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Log In</h1>
          <p className="mt-2 text-sm text-gray-600">
            Enter your credentials to access your account
          </p>
        </div>

        {message && (
          <div className="rounded-md bg-blue-50 p-4 text-sm text-blue-700">
            {message}
          </div>
        )}

        {errorMessage && (
          <div className="rounded-md bg-red-50 p-4 text-sm text-red-700">
            {errorMessage}
          </div>
        )}

        <form onSubmit={handleSubmit} className="mt-8 space-y-6">
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                disabled={isPending}
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                disabled={isPending}
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isPending}
              className="w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-300"
            >
              {isPending ? 'Logging In...' : 'Log In'}
            </button>
          </div>

          <div className="text-center text-sm">
            <p>
              Don't have an account?{' '}
              <Link href="/auth/signup" className="text-blue-600 hover:text-blue-800">
                Sign Up
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="reset-password/page.tsx">
'use client';

import { useState } from 'react';
import Link from 'next/link';

export default function ResetPasswordPage() {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    // Reset messages
    setMessage('');
    setError('');
    setIsLoading(true);
    
    try {
      const response = await fetch('/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to send reset email');
      }
      
      setMessage('Check your email for a password reset link');
      setEmail(''); // Clear the form
    } catch (err) {
      console.error('Error requesting password reset:', err);
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <div className="w-full max-w-md space-y-8 rounded-lg border p-6 shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Reset Password</h1>
          <p className="mt-2 text-sm text-gray-600">
            Enter your email address and we'll send you a link to reset your password
          </p>
        </div>

        {message && (
          <div className="rounded-md bg-green-50 p-4 text-sm text-green-700">
            {message}
          </div>
        )}

        {error && (
          <div className="rounded-md bg-red-50 p-4 text-sm text-red-700">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="mt-8 space-y-6">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email Address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              disabled={isLoading}
            />
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-300"
            >
              {isLoading ? 'Sending...' : 'Send Reset Link'}
            </button>
          </div>

          <div className="text-center text-sm">
            <p>
              Remember your password?{' '}
              <Link href="/auth/login" className="text-blue-600 hover:text-blue-800">
                Log In
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="reset-password/route.ts">
/**
 * Password Reset Route Handler
 * 
 * This file handles password reset requests using Supabase Auth.
 * It sends a password reset email to the user.
 */

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';
import { logAuditEvent } from '@/lib/audit-log';

/**
 * Handle POST requests for password reset
 * @param request The incoming request
 * @returns The response
 */
export async function POST(request: NextRequest) {
  try {
    // Parse the request body
    const body = await request.json();
    
    // Validate required fields
    if (!body.email) {
      return NextResponse.json(
        { error: 'Email is required' },
        { status: 400 }
      );
    }
    
    const supabase = createClient();
    
    // Send password reset email via Supabase
    const { error } = await supabase.auth.resetPasswordForEmail(body.email, {
      redirectTo: `${new URL(request.url).origin}/auth/update-password`,
    });
    
    if (error) {
      console.error('Password reset error:', error.message);
      
      return NextResponse.json(
        { error: 'Failed to send password reset email' },
        { status: 500 }
      );
    }
    
    // Log the password reset request (without user ID for privacy)
    try {
      await logAuditEvent({
        userId: 'anonymous', // Don't store the actual user ID for privacy
        action: 'PASSWORD_RESET_REQUEST',
        entityType: 'User',
        entityId: 'anonymous',
        details: { email: body.email },
      });
    } catch (logError) {
      console.error('Error logging password reset request:', logError);
    }
    
    // Return success response
    return NextResponse.json({
      message: 'Password reset email sent successfully',
    });
  } catch (error) {
    console.error('Password reset error:', error);
    return NextResponse.json(
      { error: 'Password reset failed', details: String(error) },
      { status: 500 }
    );
  }
}
</file>

<file path="signup/page.tsx">
'use client';

import { signUp } from '../actions';
import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function SignUpPage() {
  const router = useRouter();
  const [message, setMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [isPending, startTransition] = useTransition();

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    
    startTransition(async () => {
      const result = await signUp(formData);
      if (result?.error) {
        setErrorMessage(result.error);
        setMessage('');
      } else if (result?.message) {
        setMessage(result.message);
        setErrorMessage('');
        // Clear form on success
        event.currentTarget.reset();
      }
    });
  };

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <div className="w-full max-w-md space-y-8 rounded-lg border p-6 shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Sign Up</h1>
          <p className="mt-2 text-sm text-gray-600">
            Create your account to get started
          </p>
        </div>

        {message && (
          <div className="rounded-md bg-green-50 p-4 text-sm text-green-700">
            {message}
          </div>
        )}

        {errorMessage && (
          <div className="rounded-md bg-red-50 p-4 text-sm text-red-700">
            {errorMessage}
          </div>
        )}

        <form onSubmit={handleSubmit} className="mt-8 space-y-6">
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                disabled={isPending}
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                disabled={isPending}
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              />
            </div>
            <div>
              <label htmlFor="fullName" className="block text-sm font-medium text-gray-700">
                Full Name
              </label>
              <input
                id="fullName"
                name="fullName"
                type="text"
                disabled={isPending}
                className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isPending}
              className="w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-300"
            >
              {isPending ? 'Signing Up...' : 'Sign Up'}
            </button>
          </div>

          <div className="text-center text-sm">
            <p>
              Already have an account?{' '}
              <Link href="/auth/login" className="text-blue-600 hover:text-blue-800">
                Log In
              </Link>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="update-password/page.tsx">
'use client';

import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/utils/supabase/client';

export default function UpdatePasswordPage() {
  const router = useRouter();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [isPending, startTransition] = useTransition();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    // Reset messages
    setMessage('');
    setError('');
    
    // Validate passwords
    if (password.length < 6) {
      setError('Password must be at least 6 characters');
      return;
    }
    
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    startTransition(async () => {
      try {
        const supabase = createClient();
        
        const { error } = await supabase.auth.updateUser({
          password,
        });
        
        if (error) {
          setError(error.message);
          return;
        }
        
        setMessage('Password updated successfully');
        
        // Redirect to login after a short delay
        setTimeout(() => {
          router.push('/auth/login?message=Your password has been updated. Please log in with your new password.');
        }, 2000);
      } catch (err) {
        console.error('Error updating password:', err);
        setError('An unexpected error occurred');
      }
    });
  };

  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-2">
      <div className="w-full max-w-md space-y-8 rounded-lg border p-6 shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Update Password</h1>
          <p className="mt-2 text-sm text-gray-600">
            Enter your new password below
          </p>
        </div>

        {message && (
          <div className="rounded-md bg-green-50 p-4 text-sm text-green-700">
            {message}
          </div>
        )}

        {error && (
          <div className="rounded-md bg-red-50 p-4 text-sm text-red-700">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="mt-8 space-y-6">
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              New Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              disabled={isPending}
            />
          </div>

          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
              Confirm New Password
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500"
              disabled={isPending}
            />
          </div>

          <div>
            <button
              type="submit"
              disabled={isPending}
              className="w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-300"
            >
              {isPending ? 'Updating...' : 'Update Password'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

</files>
